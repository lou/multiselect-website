!!!
%html
  %head
    %title multiselect.js
    %meta{ :name => 'description', :content => "This is a tiny jQuery plugin which aims to be a drop-in replacement for the standard &lt;select&gt; element with multiple attribute activated. It's free, open source and it works in an unobstrusive fashion."}
    = stylesheet_link_tag 'bootstrap', 'multi-select', 'theme', 'application'
    :javascript
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-23068623-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  %body{ :'data-spy' => "scroll" }
    .navbar.navbar-fixed-top#navbar
      .navbar-inner
        .container
          = link_to '#home', :class => 'brand' do
            multiselect.js
            %span 0.9.5
          .nav
            %ul.nav
              %li= link_to 'Home', '#home'
              %li= link_to 'Usage', '#usage'
              %li= link_to 'Demos', '#demos'
              %li= link_to 'Project', '#project'
          .nav.pull-right
            %iframe{ src: "http://ghbtns.com/github-btn.html?user=lou&repo=multi-select&type=watch&count=true", allowtransparency: true, frameborder: 0, scrolling: 0, width: 102, height: 20}
            = link_to 'Download', 'https://github.com/lou/multi-select/zipball/master', :class => 'btn btn-primary'
    .container
      .hero-unit#home
        %h1 Multiselect
        %p
          This plugin is a drop-in replacement for the standard &lt;select&gt; element with multiple attribute activated.
        .row
          %ul.describe
            %li
              %strong Free
              (under
              = link_to 'WTFPL', 'http://sam.zoy.org/wtfpl/COPYING'
              license)
            %li
              Works in an
              %strong unobtrusive
              fashion
            %li
              Fully
              %strong open sourced
            %li
              %strong Keyboard
              support
            %li
              Provides some
              %strong callbacks
            %li
              Fully customizable via 
              %strong CSS
            %li
              Depends on
              %strong jQuery 1.8+
            %li
              Tiny code
              %strong ~8kb
              minified
          .hero-multiselect
            = select_tag 'test', :options => select_options(20), :multiple => 'multiple', :class => 'multiselect', :id => 'aloha'
      .page-header#usage
        %h2 Usage
      %h3 HTML
      %pre
        %code{ :'data-language' => 'html' }
          = preserve do
            :escaped
              <html>
                <head>
                  <link href="path/to/multiselect.css" media="screen" rel="stylesheet" type="text/css">
                </head>
                <body>
                  <select multiple="multiple" id="my-select" name="my-select[]">
                    <option value='elem_1'>elem 1</option>
                    <option value='elem_2'>elem 2</option>
                    <option value='elem_3'>elem 3</option>
                    <option value='elem_4'>elem 4</option>
                    ...
                    <option value='elem_100'>elem 100</option>
                  </select>
                  <script src="path/to/jquery.multi-select.js" type="text/javascript"></script>
                </body>
              </html>
      %h3
        JavaScript
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#my-select').multiSelect()
      %h3 Options
      %table.table.table-bordered.table-striped
        %thead
          %tr
            %th Name
            %th type
            %th default
            %th description
        %tbody
          %tr
            %td afterInit
            %td function
            %td function(container){}
            %td Function to call after the multiSelect initilization.
          %tr
            %td afterSelect
            %td function
            %td function(values){}
            %td Function to call after one item is selected.
          %tr
            %td afterDeselect
            %td function
            %td function(values){}
            %td Function to call after one item is deselected.
          %tr
            %td selectableHeader
            %td HTML/Text
            %td null
            %td Text or HTML to display in the selectable header.
          %tr
            %td selectionHeader
            %td HTML/Text
            %td null
            %td Text or HTML to display in the selection header.
          %tr
            %td selectableFooter
            %td HTML/Text
            %td null
            %td Text or HTML to display in the selectable footer.
          %tr
            %td selectionFooter
            %td HTML/Text
            %td null
            %td Text or HTML to display in the selection footer.
          %tr
            %td disabledClass
            %td String
            %td 'disabled' 
            %td CSS class for disabled items.
          %tr
            %td selectableOptgroup
            %td Boolean
            %td false
            %td Click on optgroup will select all nested options when set to true.
      %h3 Methods
      %br
      %h4 .multiSelect(options)
      %p
        Activates your content as a multiselect. Accepts an optional options
        %code object
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#your-select').multiSelect({});
      %br
      .alert.alert-info
        %strong Note:
        You must init the multiple select with $('#your-select').multiSelect() before calling one of the following methods.
      %h4 .multiSelect('select', String|Array)
      %p
        Select the item with the value given in parameter. The value can be either a string ('elem_1') matching the value of the option oran Array of values (['elem_1', 'elem_42']). 
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#your-select').multiSelect('select', String|Array);
      %h4 .multiSelect('deselect', String|Array)
      %p
        Deselect the item with the value given in parameter. The value can be either a string ('elem_1') matching the value of the option oran Array of values (['elem_1', 'elem_42']).
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#your-select').multiSelect('deselect', String|Array);
      %h4 .multiSelect('select_all')
      %p
        Select all elements.
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#your-select').multiSelect('select_all');
      %h4 .multiSelect('deselect_all')
      %p
        Deselect all items previously selected.
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#your-select').multiSelect('select_all');
      %h4 .multiSelect('refresh')
      %p
        Refresh current multiselect.
      %pre
        %code{ :'data-language' => 'javascript' }
          = preserve do
            :escaped
              $('#your-select').multiSelect('refresh');                 
      %br
      %h3 Keyboard
      %table.table.table-bordered.table-striped
        %thead
          %tr
            %th{ width: 120} key
            %th function
        %tbody
          %tr
            %td [&nbsp;&nbsp;&darr;&nbsp;&nbsp;]&nbsp;&nbsp;Down arrow
            %td Select next item in the focused list
          %tr
            %td [&nbsp;&nbsp;&uarr;&nbsp;&nbsp;]&nbsp;&nbsp;Up arrow
            %td Select previous item in the focused list
          %tr
            %td [&nbsp;&#8212;&nbsp;]&nbsp;&nbsp;Space
            %td Add/remove item depending on which list is focused
          %tr
            %td [ &larr; ]&nbsp;&nbsp;Left arrow
            %td Focus on the next list
          %tr
            %td [ &rarr; ]&nbsp;&nbsp;Right arrow
            %td Focus on the previous list
      .page-header#demos
        %h2 Demos
      .row
        .span12
          %h3 Pre-selected options
        .span7
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <select id='pre-selected-options' multiple='multiple'>
                    <option value='elem_1'>elem 1</option>
                    <option value='elem_2'>elem 2</option>
                    <option value='elem_3'>elem 3</option>
                    <option value='elem_4'>elem 4</option>
                    ...
                    <option value='elem_100'>elem 100</option>
                  </select>
          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#pre-selected-options').multiSelect();
        .span5
          = select_tag('pre-selected-options', :options => select_options, :selected => ['elem_1', 'elem_42'], :multiple => 'multiple', :id => 'pre-selected-options', :class => 'multiselect')
      %br
      .row
        .span12
          %h3 Callbacks
        .span7
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <select id='Callbacks' multiple='multiple'>
                    <option value='elem_1'>elem 1</option>
                    <option value='elem_2'>elem 2</option>
                    <option value='elem_3'>elem 3</option>
                    <option value='elem_4'>elem 4</option>
                    ...
                    <option value='elem_100'>elem 100</option>
                  </select>
          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#callbacks').multiSelect({
                    afterSelect: function(value, text){
                      alert("Select value: "+value);
                    },
                    afterDeselect: function(value, text){
                      alert("Deselect value: "+value);
                    }
                  });
        .span5
          = select_tag('callbacks', :options => select_options, :multiple => 'multiple', :id => 'callbacks')
      %br
      .row
        .span12
          %h3 Public methods
        .span7
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <a href='#' id='select-all'>select all</a>
                  <a href='#' id='deselect-all'>deselect all</a>
                  <a href='#' id='select-100'>select 100 elems</a>
                  <a href='#' id='deselect-100'>deselect 100 elems</a>
                  <select id='public-methods' multiple='multiple'>
                    <option value='elem_1'>elem 1</option>
                    <option value='elem_2'>elem 2</option>
                    <option value='elem_3'>elem 3</option>
                    <option value='elem_4'>elem 4</option>
                    ...
                    <option value='elem_1000'>elem 100</option>
                  </select>
          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#public-methods').multiSelect();
                  $('select-all').click(function(){
                    $('#public-methods').multiSelect('select_all');
                    return false;
                  });
                  $('deselect-all').click(function(){
                    $('#public-methods').multiSelect('deselect_all');
                    return false;
                  });
                  $('select-100').click(function(){
                    $('#public-methods').multiSelect('select', ['elem_0', 'elem_1' ..., 'elem_99']);
                    return false;
                  });
                  $('deselect-100').click(function(){
                    $('#public-methods').multiSelect('deselect', ['elem_0', 'elem_1' ..., 'elem_99']);
                    return false;
                  });
        .span5
          = link_to 'select all', nil, :id => 'select-all'
          &middot;
          = link_to 'deselect all', nil, :id => 'deselect-all'
          &middot;
          = link_to 'select 100 elems', nil, :id => 'select-100'
          &middot;
          = link_to 'deselect 100 elems', nil, :id => 'deselect-100'
          %br
          %br
          = select_tag('public-methods', :options => select_options(1000), :multiple => 'multiple', :id => 'public-methods')
          %br
          %p
            In this example there are
            %strong
              1000
            elements           
      %br
      .row
        .span12
          %h3 Optgroup
        .span7
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <select id='optgroup' multiple='multiple'>
                    <optgroup label='Friends'>
                      <option value='1'>Yoda</option>
                      <option value='2'>Obiwan</option>
                    </optgroup>
                    <optgroup label='Enemies'>
                      <option value='3'>Palpatine</option>
                      <option value='4'>Darth Vader</option>
                    </optgroup>
                  </select>
          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#optgroup').multiSelect({ selectableOptgroup: true });
        .span5
          = select_tag('optgroup', :grouped_options => {'Friends' => [['Yoda', 1], ['Obiwan',2]], 'Enemies' => [['Palpatine', 3],['Darth Vader', 4]]} , :selected => [2, 4], :multiple => 'multiple', :id => 'optgroup')
      %br
      .row
        .span12.title
          %h3 Disabled attribute
        .span7
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <select id='disabled-attribute' disabled='disabled' multiple='multiple'>
                    <option value='elem_1'>elem 1</option>
                    <option value='elem_2'>elem 2</option>
                    <option value='elem_3'>elem 3</option>
                    <option value='elem_4'>elem 4</option>
                    ...
                    <option value='elem_100'>elem 100</option>
                  </select>
          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#disabled-attribute').multiSelect();
        .span5
          = select_tag('disabled-attribute', :options => select_options, :multiple => 'multiple', :disabled => 'disabled', :id => 'disable-attribute', :class => 'multiselect')
        .span12
          .alert.alert-info
            %strong Note:
            You can also deactivate option one by one by adding disabled attribute to each option you want to disable
            %br
            %code
              = preserve do
                :escaped
                  <option value='fuu' disabled='disabled'>bar</option>
      %br
      .row
        .span12
          %h3 Custom headers and footers
        .span7
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <select id='custom-headers' multiple='multiple'>
                    <option value='elem_1'>elem 1</option>
                    <option value='elem_2'>elem 2</option>
                    <option value='elem_3'>elem 3</option>
                    <option value='elem_4'>elem 4</option>
                    ...
                    <option value='elem_100'>elem 100</option>
                  </select>
          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#custom-headers').multiSelect({
                    selectableHeader: "<div class='custom-header'>Selectable items</div>",
                    selectionHeader: "<div class='custom-header'>Selection items</div>",
                    selectableFooter: "<div class='custom-header'>Selectable footer</div>",
                    selectionFooter: "<div class='custom-header'>Selection footer</div>"
                  });
        .span5
          = select_tag('custom-headers', :options => select_options, :multiple => 'multiple', :id => 'custom-headers')
      %br
      .row
        .span12
          %h3 Searchable
        .span12
          .alert.info
            %strong Note:
            This feature is not built-in but depends on an other plugin.
            I personnally use the excellent 
            = link_to 'quicksearch', 'https://github.com/riklomas/quicksearch', :target => '_blank'
            library, but you can use whatever library you like.
        .span12
          = select_tag('searchable', :options => select_options, :multiple => 'multiple', :id => 'searchable')
          %br
        .span12
          %pre
            %code{ :'data-language' => 'html' }
              = preserve do
                :escaped
                  <select id='searchable' multiple='multiple'>
                    <option value='fr'>France</option>
                    <option value='uk'>United Kingdom</option>
                    <option value='us'>United States</option>
                    <option value='ch'>China</option>
                  </select>
                  <script src="path/to/jquery.multi-select.js" type="text/javascript"></script>
                  <script src="path/to/jquery.quicksearch.js" type="text/javascript"></script>

          %pre
            %code{ :'data-language' => 'javascript' }
              = preserve do
                :escaped
                  $('#searchable').multiSelect({
                    selectableHeader: "<input type='text' id='search' autocomplete='off' placeholder='try \"elem 2\"'>"
                  });

                  $('#search').quicksearch(
                    $('#search').quicksearch($('.ms-elem-selectable', '#ms-searchable' )).on('keydown', function(e){
                      if (e.keyCode == 40){
                        $(this).trigger('focusout');
                        $('#searchable').focus();
                        return false;
                      }
                    }
                  );
        / .row
        /   .span12
        /     %h3 Ajax
        /     %br
        /   .span12
        /     = link_to 'Ajax', '#my-modal', :'data-toggle' => 'modal'
      .page-header#project
        %h2 Project
      .row
        .span12
          .well.github
            = link_to "https://github.com/lou/multi-select", "https://github.com/lou/multi-select", :target => '_blank'
            - if @repo
              %span
                (
                %strong= @repo['watchers']
                watchers
                )
      .row
        .span6
          - if @contributors
            %h3 #{@contributors.size} Contributors
            %ul.contributors
              - if @contributors
                - @contributors.each do |c|
                  %li
                    - if c['avatar_url']
                      = image_tag c['avatar_url'], width: '35px', height: '35px'
                    = link_to c['login'], "https://github.com/#{c['login']}", :target => '_blank'
                    = "- #{c['contributions']} contribution#{ 's' if c['contributions'] != 1 }"
          - else
            Sorry, I can't fetch data from github API, you should reload this page!
        .span6
          %h3 How to contribute?
          %ul.contribute
            %li
              Fork the project 
              = link_to "https://github.com/lou/multi-select", "https://github.com/lou/multi-select", :target => '_blank'
            %li Make your feature addition or bug fix.
            %li Commit your change.
            %li Send me a pull request. Bonus points for topic branches.
      %br
      %br
      %br
      %br
      %br
      %br
      %br
      %br
      %br
      %br
      %br
      #my-modal.modal.hide.fade
        .modal-header
          Aloha
        .modal-body
          Hello World !
        .modal-footer
          Bye bye world !
          %button.btn{ :'data-dismiss' => 'modal'}
            close
    = javascript_include_tag 'jquery', 'bootstrap', 'jquery-ui', 'jquery.tinysort.js', 'jquery.quicksearch.js', 'jquery.multi-select.js', 'rainbow', 'application'